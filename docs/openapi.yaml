openapi: 3.1.0
info:
  title: Lexora API
  description: API documentation for Lexora application
  version: 0.1.0
  contact:
    name: Vasek
    email: support@lexora.com
  license:
    name: ISC
servers:
  - url: http://localhost:4000
    description: Development server
  - url: https://api.lexora.com
    description: Production server

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticates user and returns access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      summary: User registration
      description: Registers a new user in the system
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: User logout
      description: Logs out user and invalidates the current access token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generates new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      summary: Get current user info
      description: Returns information about the currently authenticated user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /decks:
    get:
      summary: Get all decks
      description: Returns a list of all user's decks with pagination
      tags:
        - Decks
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of decks per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Successfully retrieved decks list
          content:
            application/json:
              schema:
                type: object
                properties:
                  decks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Deck"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /deck:
    post:
      summary: Create new deck
      description: Creates a new deck for the authenticated user
      tags:
        - Decks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDeckRequest"
      responses:
        "201":
          description: Deck successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /deck/{id}:
    get:
      summary: Get deck by ID
      description: Returns information about a specific deck
      tags:
        - Decks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Deck ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved deck
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update deck
      description: Updates deck information
      tags:
        - Decks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Deck ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDeckRequest"
      responses:
        "200":
          description: Deck successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deck"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete deck
      description: Deletes a deck from the system
      tags:
        - Decks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Deck ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Deck successfully deleted
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Deck not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /languages:
    get:
      summary: Get available languages
      description: Returns a list of all available languages for deck creation
      tags:
        - Languages
      responses:
        "200":
          description: Successfully retrieved languages list
          content:
            application/json:
              schema:
                type: object
                properties:
                  languages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Language"

  /cards:
    get:
      summary: Get all cards
      description: Returns a list of all user's cards with optional filtering by deck and pagination
      tags:
        - Cards
      security:
        - BearerAuth: []
      parameters:
        - name: deckId
          in: query
          description: Filter cards by deck ID (optional)
          required: false
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of cards per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Successfully retrieved cards list
          content:
            application/json:
              schema:
                type: object
                properties:
                  cards:
                    type: array
                    items:
                      $ref: "#/components/schemas/Card"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /card:
    post:
      summary: Create new card
      description: Creates a new card and optionally assigns it to a deck
      tags:
        - Cards
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
      responses:
        "201":
          description: Card successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /card/{cardId}:
    get:
      summary: Get card by ID
      description: Returns information about a specific card
      tags:
        - Cards
      security:
        - BearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update card
      description: Updates card information
      tags:
        - Cards
      security:
        - BearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCardRequest"
      responses:
        "200":
          description: Card successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete card
      description: Deletes a card from the system
      tags:
        - Cards
      security:
        - BearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Card successfully deleted
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Card not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        name:
          type: string
          description: User full name
          example: "John Doe"
        avatar:
          type: string
          format: uri
          description: User avatar URL
          example: "https://example.com/avatar.jpg"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User role
          default: user
          example: "user"
        isActive:
          type: boolean
          description: Whether user is active
          default: true
          example: true
        createdAt:
          type: string
          format: date-time
          description: User creation date
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2023-01-01T00:00:00Z"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        name:
          type: string
          description: User full name
          minLength: 2
          maxLength: 50
          example: "John Doe"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: User password (minimum 8 characters)
          example: "password123"
        confirmPassword:
          type: string
          minLength: 8
          maxLength: 128
          description: Password confirmation (must match password)
          example: "password123"

    LoginResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: "#/components/schemas/User"

    RegisterResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: "#/components/schemas/User"

    LogoutResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Logout confirmation message
          example: "Successfully logged out"
        loggedOutAt:
          type: string
          format: date-time
          description: Timestamp when user was logged out
          example: "2023-01-01T12:00:00Z"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token obtained from login or register
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RefreshTokenResponse:
      type: object
      required:
        - token
        - refreshToken
      properties:
        token:
          type: string
          description: New JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: New refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600

    Deck:
      type: object
      required:
        - id
        - name
        - userId
        - languageCode
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique deck identifier
          example: "550e8400-e29b-41d4-a716-446655440001"
        name:
          type: string
          description: Deck name
          example: "English Vocabulary"
        description:
          type: string
          description: Deck description
          example: "Common English words for beginners"
        userId:
          type: string
          format: uuid
          description: ID of the deck owner
          example: "550e8400-e29b-41d4-a716-446655440000"
        languageCode:
          type: string
          description: Language code for the deck (ISO 639-1)
          example: "en"
          minLength: 2
          maxLength: 2
        parentDeckId:
          type: string
          format: uuid
          description: ID of the parent deck (null for root decks)
          example: null
        cardCount:
          type: integer
          description: Number of cards in the deck
          minimum: 0
          example: 25
        subdeckCount:
          type: integer
          description: Number of nested decks inside this deck
          minimum: 0
          example: 3
        createdAt:
          type: string
          format: date-time
          description: Deck creation date
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2023-01-01T00:00:00Z"

    CreateDeckRequest:
      type: object
      required:
        - name
        - languageCode
      properties:
        name:
          type: string
          description: Deck name
          minLength: 1
          maxLength: 100
          example: "English Vocabulary"
        description:
          type: string
          description: Deck description
          maxLength: 500
          example: "Common English words for beginners"
        languageCode:
          type: string
          description: Language code for the deck (ISO 639-1)
          example: "en"
          minLength: 2
          maxLength: 2
        parentDeckId:
          type: string
          format: uuid
          description: ID of the parent deck (optional, for nested decks)
          example: "550e8400-e29b-41d4-a716-446655440001"

    UpdateDeckRequest:
      type: object
      properties:
        name:
          type: string
          description: Deck name
          minLength: 1
          maxLength: 100
          example: "English Vocabulary"
        description:
          type: string
          description: Deck description
          maxLength: 500
          example: "Common English words for beginners"
        languageCode:
          type: string
          description: Language code for the deck (ISO 639-1)
          example: "en"
          minLength: 2
          maxLength: 2

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 100
        totalPages:
          type: integer
          description: Total number of pages
          example: 10

    Language:
      type: object
      required:
        - code
        - name
        - icon
      properties:
        code:
          type: string
          description: Language code (ISO 639-1)
          example: "en"
          minLength: 2
          maxLength: 2
        name:
          type: string
          description: Language name
          example: "English"
        nativeName:
          type: string
          description: Language name in native language
          example: "English"
        icon:
          type: string
          format: uri
          description: URL to language flag icon
          example: "https://flagcdn.com/w20/us.png"

    Card:
      type: object
      required:
        - id
        - front
        - back
        - deckId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique card identifier
          example: "550e8400-e29b-41d4-a716-446655440002"
        front:
          type: string
          description: Front side of the card (word, phrase, question)
          example: "Hello"
        back:
          type: string
          description: Back side of the card (translation, answer)
          example: "Привіт"
        description:
          type: string
          description: Additional description or context
          example: "Common greeting"
        image:
          type: string
          format: uri
          description: URL to card image
          example: "https://example.com/images/hello.jpg"
        deckId:
          type: string
          format: uuid
          description: ID of the deck this card belongs to
          example: "550e8400-e29b-41d4-a716-446655440001"
        createdAt:
          type: string
          format: date-time
          description: Card creation date
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2023-01-01T00:00:00Z"

    CreateCardRequest:
      type: object
      required:
        - front
        - back
      properties:
        front:
          type: string
          description: Front side of the card (word, phrase, question)
          minLength: 1
          maxLength: 500
          example: "Hello"
        back:
          type: string
          description: Back side of the card (translation, answer)
          minLength: 1
          maxLength: 500
          example: "Привіт"
        description:
          type: string
          description: Additional description or context
          maxLength: 1000
          example: "Common greeting"
        image:
          type: string
          format: uri
          description: URL to card image
          example: "https://example.com/images/hello.jpg"
        deckId:
          type: string
          format: uuid
          description: ID of the deck to assign this card to (optional)
          example: "550e8400-e29b-41d4-a716-446655440001"

    UpdateCardRequest:
      type: object
      properties:
        front:
          type: string
          description: Front side of the card (word, phrase, question)
          minLength: 1
          maxLength: 500
          example: "Hello"
        back:
          type: string
          description: Back side of the card (translation, answer)
          minLength: 1
          maxLength: 500
          example: "Привіт"
        description:
          type: string
          description: Additional description or context
          maxLength: 1000
          example: "Common greeting"
        image:
          type: string
          format: uri
          description: URL to card image
          example: "https://example.com/images/hello.jpg"
        deckId:
          type: string
          format: uuid
          description: ID of the deck to move this card to (optional)
          example: "550e8400-e29b-41d4-a716-446655440001"

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Error description
          example: "Invalid email or password"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
          example:
            field: "email"
            value: "invalid-email"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication and registration operations
  - name: Decks
    description: Deck management operations
  - name: Languages
    description: Available languages for deck creation
  - name: Cards
    description: Card management operations within decks
