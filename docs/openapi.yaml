openapi: 3.1.0
info:
  title: Lexora API
  description: API documentation for Lexora application
  version: 0.1.0
  contact:
    name: Vasek
    email: support@lexora.com
  license:
    name: ISC
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.lexora.com
    description: Production server

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticates user and returns access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      summary: User registration
      description: Registers a new user in the system
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: User logout
      description: Logs out user and invalidates the current access token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "401":
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        name:
          type: string
          description: User full name
          example: "John Doe"
        avatar:
          type: string
          format: uri
          description: User avatar URL
          example: "https://example.com/avatar.jpg"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User role
          default: user
          example: "user"
        isActive:
          type: boolean
          description: Whether user is active
          default: true
          example: true
        createdAt:
          type: string
          format: date-time
          description: User creation date
          example: "2023-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2023-01-01T00:00:00Z"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        name:
          type: string
          description: User full name
          minLength: 2
          maxLength: 50
          example: "John Doe"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: User password (minimum 8 characters)
          example: "password123"
        confirmPassword:
          type: string
          minLength: 8
          maxLength: 128
          description: Password confirmation (must match password)
          example: "password123"

    LoginResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: "#/components/schemas/User"

    RegisterResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: "#/components/schemas/User"

    LogoutResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Logout confirmation message
          example: "Successfully logged out"
        loggedOutAt:
          type: string
          format: date-time
          description: Timestamp when user was logged out
          example: "2023-01-01T12:00:00Z"

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Error description
          example: "Invalid email or password"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
          example:
            field: "email"
            value: "invalid-email"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication and registration operations
